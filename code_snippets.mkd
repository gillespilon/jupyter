% Code snippets

# In brevi #

This document contains snippets of Python code.

- [Libraries](#libraries)
- [Code validation](#code-validation)
- [Data files](#data-files)
- [Math](#math)
- [Statistics](#statistics)
- [Output](#output)

# Libraries #

To determine the current version of an installed library:

    pacman -Q python-scipy

Output:

    python-scipy 0.16-1

My libaries are installed with pacman usually. Can use pip. Therefore it's possible the released version is newer than my installed version because pip does not yet check for updates as does pacman.

# Code validation #

If the program is a standalone python file, use flake8 to check the code. There isn't anything (yet) for checking code in a Jupyter notebook.

# Data files #

Python reads csv files with an assumption of utf-8 coding. It isn't necessary to declare it.

    df = pd.read_csv('datafile_filename.csv', encoding='utf-8')
    df = pd.read_csv('datafile_filename.csv', encoding='utf-16')

A data file contains two columns: y is a column of numbers and x is a column of codes, 1 and 2, or A and B.

    sample_one = df['y'][df['x'] == 1]
    sample_two = df['y'][df['x'] == 2]
    sample_one = df['y'][df['x'] == 'A']
    sample_two = df['y'][df['x'] == 'B']

If the above data file contains other columns, and thus possibly that columns y and x are not of the same length, there could be NaN entries in y and x. To move these:

    sample_one = sample_one[sample_one.notnull()]
    sample_two = sample_two[sample_two.notnull()]

Do I need to close a file?

    df.close()

# Math #

Use numpy for most mathematical calculations.

    df['y'].mean
    np.sqrt(y)

# Statistics #

## Hypothesis tests ##

## Descriptive statistics ##

If you have a dataframe "df" you can get these basic statistics on all columns of numbers.

    df.describe()

Or one statistic at a time.

    df.mean
    df.std
    df.count
    df.min
    df.max

# Output #

## Print v. Display_html #

Print.

    scipyresult = stats.ttest_ind(sample_one, sample_two, equal_var = False)

    if scipyresult.pvalue < significance_level:
        print('Statistically significant. The test statistic =',
              scipyresult.statistic.round(3),
              '. The p value = ', scipyresult.pvalue.round(3)), '.'
    else:
        print('Not statistically significant. The test statistic =',
              scipyresult.statistic.round(3),
              '. The p value = ', scipyresult.pvalue.round(3)), '.'

    display_html('H<sub>o</sub>: average of sample 1 = average of sample 2' + '<br />' +
                 'H<sub>a</sub>: average of sample 1 â‰  average of sample 2' + '<br />' +
                 'average of sample 1 = ' + str(average_one.round(3)) + '<br />' +
                 'average of sample 2 = ' + str(average_two.round(3)) + '<br />' +
                 't<sub>calculated</sub> = ' + str(t_calculated.round(3)) + '<br />' +
                 't<sub>critical</sub> = ' + str(t_critical.round(3)) + '<br />' +
                 'p value for t<sub>calculated</sub> = ' + str(p_value.round(3))
                 , raw=True)

Print_html

    if abs(t_calculated) > t_critical:
        display_html('The average of sample 1 is ' +
                     'statistically, significantly different from ' +
                     'the average of sample 2, ' +
                     'because | t<sub>calculated</sub> | > t<sub>critical</sub> .', raw=True)
    else:
        display_html('The average of sample 1 is not ' +
                     'statistically, significantly different from ' +
                     'the average of sample 2, ' +
                     'because | t<sub>calculated</sub> | < t<sub>critical</sub> .', raw=True)
